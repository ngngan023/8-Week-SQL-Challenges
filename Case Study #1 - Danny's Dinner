#1. What is the total amount each customer spent at the restaurant?

SELECT s.customer_id, sum(m.price) AS 'total amount'
FROM sales s
JOIN menu m
	USING (product_id)
GROUP BY customer_id;


#2. How many days has each customer visited the restaurant?

SELECT customer_id, count(distinct(order_date)) AS 'visting times'
FROM Sales
GROUP BY customer_id;


#3. What was the first item from the menu purchased by each customer?

WITH ranking_view AS 
(
SELECT 	s.customer_id, 
        s.order_date,
        m.product_name,
        DENSE_RANK() OVER (
			PARTITION BY s.customer_id ORDER BY (s.order_date)
			) AS ranking
        FROM sales s
        JOIN menu m
        USING (product_id)
)
SELECT customer_id, product_name
FROM ranking_view
WHERE ranking = 1
GROUP BY customer_id, product_name;


#4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT  product_name, (COUNT(s.product_id)) AS most_purchased
FROM sales s
JOIN menu m
   USING (product_id)
GROUP BY product_name
ORDER BY most_purchased DESC
LIMIT 1;


#5. Which item was the most popular for each customer?

WITH buying_summary AS 
(
	SELECT customer_id, 
		 product_name, 
             COUNT(product_id) AS order_count,
		 DENSE_RANK () OVER (
             PARTITION BY s.customer_id 
             ORDER BY COUNT (product_id) DESC) AS ranking
	FROM sales s
	JOIN menu m
	USING (product_id)
   	GROUP BY customer_id, product_id
    )
SELECT customer_id, product_name, order_count FROM buying_summary
WHERE ranking =1;


#6. Which item was purchased first by the customer after they became a member?

WITH summary AS (
	SELECT s.customer_id, 
		 m.product_name,
             mem.join_date, 
             s.order_date,
             DENSE_RANK () OVER (
			PARTITION BY s.customer_id ORDER BY s.order_date) as ranking
	FROM sales s
	JOIN menu m
		USING (product_id)
	JOIN members mem
		ON s.customer_id = mem.customer_id
	WHERE s.order_date >= mem.join_date
   	)
SELECT customer_id, product_name, join_date, order_date FROM summary
WHERE ranking =1;


#7. Which item was purchased just before the customer became a member?

WITH summary AS (
	SELECT s.customer_id, 
		 m.product_name,
             mem.join_date, 
             s.order_date,
             DENSE_RANK () OVER (
			PARTITION BY s.customer_id ORDER BY s.order_date DESC) as ranking
	FROM sales s
	JOIN menu m
		USING (product_id)
	JOIN members mem
		ON s.customer_id = mem.customer_id
	WHERE s.order_date < mem.join_date
   	)
SELECT customer_id, product_name, join_date, order_date FROM summary
WHERE ranking =1;


#8. What is the total items and amount spent for each member before they became a member?

SELECT s.customer_id, 
		count(s.product_id) as 'total_items',
		sum(m.price) as 'total_spent'
FROM sales s
	JOIN  members mem USING (customer_id)
	JOIN menu m USING (product_id)
WHERE mem.join_date > s.order_date
GROUP BY customer_id
ORDER BY customer_id;

#9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT s.customer_id, sum(
	CASE
    WHEN m.product_name = 'sushi' THEN m.price * 20
    ELSE m.price * 10
    END) as 'points'
FROM sales s
JOIN menu m
	USING (product_id)
GROUP BY s.customer_id;


#10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

WITH dates_cte AS 
(
   SELECT *, 
      mem.join_date + INTERVAL 6 DAY AS valid_date, 
      LAST_DAY ('2021-01-31') AS last_date
   FROM members mem
)
SELECT s.customer_id, sum(
	CASE
		WHEN m.product_name = 'sushi' THEN m.price *20
        WHEN s.order_date BETWEEN join_date AND valid_date THEN m.price*20
		ELSE m.price*10
    END ) as 'points'
FROM dates_cte
JOIN sales s USING (customer_id)
JOIN menu m USING (product_id)
WHERE s.order_date < last_date
GROUP BY s.customer_id
ORDER BY s.customer_id;


#Bonus questions
[JOIN ALL THE THINGS]
SELECT s.customer_id, s.order_date, m.product_name, m.price,
	CASE 
    WHEN mem.join_date <= s.order_date THEN 'Y'
    ELSE 'N'
    END
	AS 'member'
FROM sales s
LEFT OUTER JOIN menu m
	USING (product_id)
LEFT OUTER JOIN members mem
	USING (customer_id)
ORDER BY s.customer_id;



[RANK ALL THE THINGS]
WITH join_table AS (
SELECT s.customer_id, s.order_date, m.product_name, m.price,
	CASE 
    WHEN mem.join_date <= s.order_date THEN 'Y'
    ELSE 'N'
    END
	AS 'member'
FROM sales s
LEFT OUTER JOIN menu m
	USING (product_id)
LEFT OUTER JOIN members mem
	USING (customer_id)
ORDER BY s.customer_id)

SELECT *, 
CASE
	WHEN member = 'Y' THEN DENSE_RANK () OVER (PARTITION BY customer_id, member ORDER BY order_date) 
    ELSE 'null'
END
AS ranking
FROM join_table;
